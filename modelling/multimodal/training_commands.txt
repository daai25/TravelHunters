# =============================================================================
# TravelHunters Multi-Modal Training - Terminal Befehle
# =============================================================================
# Alle Befehle bereit zum Kopieren und Einfügen
# Datum: 15.07.2025

# =============================================================================
# 🚀 SCHNELLSTART - Alles in einem Befehl
# =============================================================================

# Wechsle ins Projektverzeichnis und starte Training
cd /Users/leonakryeziu/PycharmProjects/SummerSchool/TravelHunters/modelling/multimodal && ./train_multimodal.sh

# =============================================================================
# 📋 SCHRITT-FÜR-SCHRITT BEFEHLE
# =============================================================================

# 1. Ins Multimodal-Verzeichnis wechseln
cd /Users/leonakryeziu/PycharmProjects/SummerSchool/TravelHunters/modelling/multimodal

# 2. Prüfe ob extrahierte Bilder verfügbar sind
ls -la ../../../data_acquisition/database/extracted_images/ | head -10

# 3. Prüfe Anzahl der Trainingsbilder
find ../../../data_acquisition/database/extracted_images -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" | wc -l

# 4. Prüfe Python-Environment
python --version

# 5. Teste wichtige Pakete
python -c "import numpy, pandas, tensorflow, sklearn, PIL, joblib; print('✅ Alle Pakete verfügbar')"

# 6. Führe das Training aus (automatisches Skript)
./train_multimodal.sh

# =============================================================================
# 🔧 MANUELLES TRAINING (falls Skript nicht funktioniert)
# =============================================================================

# 1. Ins Multimodal-Verzeichnis wechseln
cd /Users/leonakryeziu/PycharmProjects/SummerSchool/TravelHunters/modelling/multimodal

# 2. Interaktives Training starten
python multimodal_recommender.py

# Dann wählen Sie:
# "2" für Training
# "y" für Bestätigung
# "/Users/leonakryeziu/PycharmProjects/SummerSchool/TravelHunters/data_acquisition/database/extracted_images" als Bildverzeichnis

# =============================================================================
# 🧪 NACH DEM TRAINING - Testen und Validieren
# =============================================================================

# 1. Prüfe ob Modell gespeichert wurde
ls -la *.joblib

# 2. Teste das trainierte Modell
python multimodal_recommender.py

# Dann wählen Sie:
# "1" für Demo
# Geben Sie eine Suchanfrage ein, z.B. "beach hotel with spa"

# 3. Überprüfe Trainingslog (falls vorhanden)
tail -50 training.log 2>/dev/null || echo "Kein Trainingslog gefunden"

# =============================================================================
# 🔍 DEBUGGING-BEFEHLE
# =============================================================================

# Prüfe Systemanforderungen
echo "🖥️ System Info:"
uname -a
echo "🐍 Python:"
python --version
echo "📦 Wichtige Pakete:"
python -c "
import sys
packages = ['numpy', 'pandas', 'tensorflow', 'sklearn', 'PIL', 'joblib']
for pkg in packages:
    try:
        __import__(pkg)
        print(f'✅ {pkg}')
    except ImportError:
        print(f'❌ {pkg} fehlt')
"

# Prüfe verfügbaren Speicher
df -h .

# Prüfe Bilddaten
echo "📸 Bildstatistiken:"
echo "Städte: $(ls ../../../data_acquisition/database/extracted_images | wc -l)"
echo "Bilder: $(find ../../../data_acquisition/database/extracted_images -name '*.jpg' -o -name '*.jpeg' -o -name '*.png' | wc -l)"

# Zeige erste 5 Städte mit Bildanzahl
echo "🏙️ Erste 5 Städte:"
for city in $(ls ../../../data_acquisition/database/extracted_images | head -5); do
    count=$(ls ../../../data_acquisition/database/extracted_images/"$city"/*.jpg ../../../data_acquisition/database/extracted_images/"$city"/*.png 2>/dev/null | wc -l)
    echo "  $city: $count Bilder"
done

# =============================================================================
# 📚 HILFE UND DOKUMENTATION
# =============================================================================

# Zeige Hilfe für das multimodal_recommender Skript
python multimodal_recommender.py --help 2>/dev/null || echo "Keine --help Option verfügbar"

# Zeige verfügbare Funktionen
python -c "
from multimodal_recommender import *
import inspect
print('🔧 Verfügbare Funktionen:')
for name, obj in globals().items():
    if callable(obj) and not name.startswith('_'):
        print(f'  {name}')
"

# =============================================================================
# ⚡ PERFORMANCE-OPTIMIERUNG
# =============================================================================

# Reduziere Bildanzahl pro Stadt für schnelleres Training (optional)
python -c "
import os
from pathlib import Path

extracted_dir = Path('../../../data_acquisition/database/extracted_images')
max_images = 10  # Maximal 10 Bilder pro Stadt

for city_dir in extracted_dir.iterdir():
    if city_dir.is_dir():
        images = list(city_dir.glob('*.jpg')) + list(city_dir.glob('*.png'))
        if len(images) > max_images:
            print(f'{city_dir.name}: {len(images)} -> {max_images} Bilder')
            # Lösche überschüssige Bilder (optional - auskommentiert für Sicherheit)
            # for img in images[max_images:]:
            #     img.unlink()
"

# =============================================================================
# 🔄 WIEDERHOLUNG UND CLEANUP
# =============================================================================

# Lösche vorherige Trainingsmodelle (falls neu trainiert werden soll)
rm -f *.joblib
rm -f training.log

# Starte sauberes Training
./train_multimodal.sh

# =============================================================================
# 💾 BACKUP UND WIEDERHERSTELLUNG
# =============================================================================

# Erstelle Backup der trainierten Modelle
mkdir -p backups/$(date +%Y%m%d_%H%M%S)
cp *.joblib backups/$(date +%Y%m%d_%H%M%S)/ 2>/dev/null || echo "Keine Modelle zum Backup"

# Zeige verfügbare Backups
ls -la backups/

# Stelle ein Backup wieder her (BEISPIEL - ersetze mit tatsächlichem Backup-Ordner)
# cp backups/20250715_143000/*.joblib .

# =============================================================================
# 📊 MONITORING WÄHREND DES TRAININGS
# =============================================================================

# In einem separaten Terminal: Überwache Speicherverbrauch
# watch -n 5 'ps aux | grep python | grep -v grep'

# Überwache Festplattenspeicher
# watch -n 10 'df -h .'

# Zeige Python-Prozesse
# ps aux | grep python | grep -v grep

# =============================================================================
# ✅ FERTIG!
# =============================================================================

echo "🎉 Alle Terminal-Befehle bereit!"
echo "Beginnen Sie mit dem Schnellstart-Befehl oben oder"
echo "folgen Sie den Schritt-für-Schritt Anweisungen."
